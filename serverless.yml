service: data-portal-app-api

plugins:
  - serverless-wsgi
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-aws-documentation
  - serverless-associate-waf
  - serverless-plugin-scripts

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:STAGE}
  region: ap-southeast-2
  role: ${env:LAMBDA_IAM_ROLE_ARN}
  vpc:
    securityGroupIds:
      "Fn::Split":
        - ","
        - ${env:LAMBDA_SECURITY_GROUP_IDS}
    subnetIds:
      "Fn::Split":
        - ","
        - ${env:LAMBDA_SUBNET_IDS}
  environment:
    SSM_KEY_NAME_DJANGO_SECRET_KEY: ${env:SSM_KEY_NAME_DJANGO_SECRET_KEY}
    SSM_KEY_NAME_FULL_DB_URL: ${env:SSM_KEY_NAME_FULL_DB_URL}
    LIMS_BUCKET_NAME: ${env:LIMS_BUCKET_NAME}
    LIMS_CSV_OBJECT_KEY: ${env:LIMS_CSV_OBJECT_KEY}

functions:
  api:
    handler: wsgi_handler.handler
    events:
      - http:
          path: lims
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: lims/{id}
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: s3
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: s3/{id}
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: subjects
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: subjects/{id}
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: subjects/{id}/s3
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: subjects/{id}/s3/{id}
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: files
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: file-signed-url
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: storage-stats
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
  sqs_s3_event_processor:
    handler: data_processors.sqs_s3_event_processor.handler
    events:
      - sqs:
          arn: ${env:S3_EVENT_SQS_ARN}
  lims_update_processor:
    handler: data_processors.lims_update_processor.handler
    events:
      - s3:
          bucket: ${env:LIMS_BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - suffix: ${env:LIMS_CSV_OBJECT_KEY}
          existing: true
    timeout: 20
  migrate:
    handler: migrate.handler
    timeout: 20

custom:
  wsgi:
    app: data_portal.wsgi.application
    packRequirements: false
  scripts:
    hooks:
      # Run db migration as part of the deployment process
      'deploy:finalize': SLS_DEBUG=true sls invoke -f migrate --STAGE ${opt:STAGE} --noinput
  pythonRequirements:
     zip: true
     slim: true
  customDomain:
    domainName: ${env:API_DOMAIN_NAME}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
  associateWaf:
    name: dataPortalAPIWebAcl
package:
  exclude:
    - node_modules/**
    - mocks/**
