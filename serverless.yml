# NOTE: update this with your service name
service: data-portal-app-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager
  - serverless-aws-documentation

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  customDomain:
    domainName: ${opt:API_DOMAIN_NAME}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
  documentation:
    api:
      info:
        version: "2"
        title: "Data Portal APIs"
        description: "API documentation"
    models:
      -
        name: HeaderColumn
        description: "Defines a data column"
        contentType: "application/json"
        schema:
          type: object
          properties:
            key:
              type: string
            sortable:
              type: boolean
      -
        name: DataRow
        description: "A data record row"
        contentType: "application/json"
        schema:
          type: array
          items:
            type: string
      -
        name: Meta
        description: "Meta data of the data rows"
        contentType: "application/json"
        schema:
          type: object
          properties:
            totalRows:
              description: "Total number of rows"
              type: integer
            size:
              description: "Page size (/no. of rows in a page)"
              type: integer
            page:
              description: "Current page index"
              type: integer
            start:
              description: "Which row number this page starts from"
              type: integer
            totalPages:
              description: "Total number of pages"
              type: integer
      -
        name: FilesResponse
        description: "Files data response"
        contentType: "application/json"
        schema:
          type: object
          properties:
            rows:
              type: object
              properties:
                headRow:
                  type: array
                  items:
                    $ref: "{{model: HeaderColumn}}"
                dataRows:
                  type: array
                  items:
                    $ref: "{{model: DataRow}}"
            meta:
              $ref: "{{model: Meta}}"
      -
        name: BadRequestResponse
        description: "Bad request response"
        contentType: "application/json"
        schema:
          type: object
          properties:
            status:
              type: boolean
            errors:
              type: string
      -
        name: FailureResponse
        description: "Failure response"
        contentType: "application/json"
        schema:
          type: object
          properties:
            status:
              type: boolean
            errors:
              type: string
      -
        name: SignedFileURLResponse
        description: "Signed file URL response"
        contentType: "application/json"
        schema:
          type: string

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:STAGE}
  region: ap-southeast-2
  timeout: 20

  iamRoleStatements:
    - Effect: Allow
      Action: [
        "athena:BatchGetQueryExecution",
        "athena:CancelQueryExecution",
        "athena:GetCatalogs",
        "athena:GetExecutionEngine",
        "athena:GetExecutionEngines",
        "athena:GetNamespace",
        "athena:GetNamespaces",
        "athena:GetQueryExecution",
        "athena:GetQueryExecutions",
        "athena:GetQueryResults",
        "athena:GetQueryResultsStream",
        "athena:GetTable",
        "athena:GetTables",
        "athena:ListQueryExecutions",
        "athena:RunQuery",
        "athena:StartQueryExecution",
        "athena:StopQueryExecution",
        "s3:GetBucketLocation",
        "s3:GetObject",
        "s3:ListBucket",
        "s3:ListBucketMultipartUploads",
        "s3:ListMultipartUploadParts",
        "s3:AbortMultipartUpload",
        "s3:PutObject",
        "glue:*"
      ]
      Resource: "*"

functions:
  file-search:
    handler: file-search.main
    events:
      - http:
          path: files
          method: get
          cors: true
          authorizer: aws_iam
          documentation:
            summary: File search
            description: >
              Provides the ability to search files with custom filters. Needs to be authenticated.
            pathParams:
              -
                name: query
                description: The query string (use empty string for no filter)
                required: true
              -
                name: rowsPerPage
                description: Number of rows to be returned (default 20)
                required: false
              -
                name: page
                description: Current pagination index (default 0)
                required: false
              -
                name: sortCol
                description: The column to be sorted (choices - columns with sortable=true)
                required: false
              -
                name: sortAsc
                description: Sort in ascending order (default false)
                required: false
              -
                name: randomSamples
                description: Retrieve n randomly-selected samples
                required: false
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": FilesResponse
              -
                statusCode: '400'
                responseModels:
                  "application/json": BadRequestResponse

    environment:
      ATHENA_OUTPUT_LOCATION: ${opt:ATHENA_OUTPUT_LOCATION}
      S3_KEYS_TABLE_NAME: ${opt:S3_KEYS_TABLE_NAME}
      LIMS_TABLE_NAME: ${opt:LIMS_TABLE_NAME}

  file-signed-url:
    handler: file-signed-url.main
    events:
      - http:
          path: file-signed-url
          method: get
          cors: true
          authorizer: aws_iam
          documentation:
            summary: Get signed url of a S3 file
            description: >
              Provides the ability to get the signed url of a S3 object key,
              using the current authenticated user.
            pathParams:
              -
                name: bucket
                description: The name of the bucket where the S3 key is in
                required: true
              -
                name: key
                description: The key of the S3 file to be retrieved
                required: true
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": SignedFileURLResponse
              -
                statusCode: '500'
                responseModels:
                  "application/json": FailureResponse

resources:
  - ${file(resources/api-gateway-errors.yml)}
