service: data-portal-api

frameworkVersion: '^2'

plugins:
  - serverless-wsgi
  - serverless-python-requirements
  - serverless-domain-manager
  #- serverless-associate-waf
  - serverless-prune-plugin

provider:
  lambdaHashingVersion: 20201221
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-2
  deploymentBucket:
    name: ${ssm:/data_portal/backend/serverless_deployment_bucket}
    serverSideEncryption: AES256
  iam:
    role: ${ssm:/data_portal/backend/lambda_iam_role_arn}
  endpointType: regional
  httpApi:
    disableDefaultEndpoint: true
    payload: '2.0'
    cors:
      allowedOrigins:
        - https://data.umccr.org
        - https://data.prod.umccr.org
        - https://data.dev.umccr.org
      allowedHeaders:
        - Content-Type
        - Authorization
        - X-Amz-Date
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
      allowedMethods:
        - GET
        - OPTIONS
        - HEAD
        - DELETE
        - POST
        - PUT
        - PATCH
      allowCredentials: false
      maxAge: 300
    authorizers:
      cognitoJwtAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${self:provider.region}.amazonaws.com/${ssm:/data_portal/client/cog_user_pool_id}
        audience:
          - ${ssm:/data_portal/client/cog_app_client_id_local}
          - ${ssm:/data_portal/client/cog_app_client_id_stage}
  vpc:
    securityGroupIds:
      "Fn::Split":
        - ","
        - ${ssm:/data_portal/backend/lambda_security_group_ids}
    subnetIds:
      "Fn::Split":
        - ","
        - ${ssm:/data_portal/backend/lambda_subnet_ids}
  environment:
    DJANGO_SETTINGS_MODULE: data_portal.settings.aws

functions:

  api:
    handler: wsgi_handler.handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - httpApi:
          path: /{proxy+}
          method: GET
          authorizer: cognitoJwtAuthorizer
      - httpApi:
          path: /{proxy+}
          method: POST
          authorizer: cognitoJwtAuthorizer
    timeout: 28

  migrate:
    handler: migrate.handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    timeout: 120

  lims_scheduled_update_processor:
    handler: data_processors.lims.lambdas.google_lims.scheduled_update_handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - schedule:
          rate: cron(0 12 * * ? *)
          enabled: ${self:custom.enabled.${self:provider.stage}, self:custom.enabled.other}
    timeout: 120

  labmetadata_scheduled_update_processor:
    handler: data_processors.lims.lambdas.labmetadata.scheduled_update_handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - schedule:
          rate: cron(0 12 * * ? *)
          enabled: ${self:custom.enabled.${self:provider.stage}, self:custom.enabled.other}
    timeout: 120

  sqs_s3_event_processor:
    handler: data_processors.s3.lambdas.s3_event.handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - sqs:
          arn: ${ssm:/data_portal/backend/s3_event_sqs_arn}
    timeout: 120
    # Uncomment to enable xray on this lambda
#    tracing: Active
#    environment:
#      AWS_XRAY_SDK_ENABLED: true

  sqs_report_event_processor:
    handler: data_processors.reports.lambdas.report_event.sqs_handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - sqs:
          arn: ${ssm:/data_portal/backend/sqs_report_event_queue_arn}
    timeout: 60
    memorySize: 4096
    # Uncomment to enable xray on this lambda
#    tracing: Active
#    environment:
#      AWS_XRAY_SDK_ENABLED: true

  sqs_iap_event_processor:
    handler: data_processors.pipeline.lambdas.sqs_iap_event.handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - sqs:
          arn: ${ssm:/data_portal/backend/iap_ens_event_sqs_arn}
    timeout: 28

  sqs_germline_event_processor:
    handler: data_processors.pipeline.lambdas.germline.sqs_handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - sqs:
          arn: ${ssm:/data_portal/backend/sqs_germline_queue_arn}
    timeout: 28

  sqs_tumor_normal_event_processor:
    handler: data_processors.pipeline.lambdas.tumor_normal.sqs_handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - sqs:
          arn: ${ssm:/data_portal/backend/sqs_tumor_normal_queue_arn}
    timeout: 28

  sqs_notification_event_processor:
    handler: data_processors.pipeline.lambdas.notification.sqs_handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - sqs:
          arn: ${ssm:/data_portal/backend/sqs_notification_queue_arn}
    timeout: 28

  bcl_convert:
    handler: data_processors.pipeline.lambdas.bcl_convert.handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    timeout: 28

  germline:
    handler: data_processors.pipeline.lambdas.germline.handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    timeout: 28

  tumor_normal:
    handler: data_processors.pipeline.lambdas.tumor_normal.handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    timeout: 28

  fastq:
    handler: data_processors.pipeline.lambdas.fastq.handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    timeout: 28

  fastq_list_row:
    handler: data_processors.pipeline.lambdas.fastq_list_row.handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    timeout: 28

  orchestrator:
    handler: data_processors.pipeline.lambdas.orchestrator.handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    timeout: 28

  workflow_update:
    handler: data_processors.pipeline.lambdas.workflow_update.handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    timeout: 28

  google_lims_update:
    handler: data_processors.pipeline.lambdas.google_lims_update.handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    timeout: 28

  wes_launch:
    handler: data_processors.pipeline.lambdas.wes_handler.launch
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    timeout: 28

  wes_get_workflow_run:
    handler: data_processors.pipeline.lambdas.wes_handler.get_workflow_run
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    timeout: 28

  notification:
    handler: data_processors.pipeline.lambdas.notification.handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    timeout: 28

  gds_search:
    handler: data_processors.pipeline.lambdas.gds_search.handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    timeout: 28

custom:
  enabled:
    dev: false
    prod: true
    other: false
  wsgi:
    app: data_portal.wsgi.application
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
    layer: true
    zip: false
    slim: true
    slimPatternsAppendDefaults: true
    slimPatterns: ${file(slimpatterns.yml):slimPatterns}
  customDomain:
    domainName: ${ssm:/data_portal/backend/api_domain_name}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateArn: ${ssm:/data_portal/backend/certificate_arn}
    apiType: http
    endpointType: regional
  #associateWaf:
  #  name: ${ssm:/data_portal/backend/waf_name}
  prune:
    automatic: true
    includeLayers: true
    number: 3

package:
  patterns:
    - '!.husky/**'
    - '!.git/**'
    - '!.idea/**'
    - '!__pycache__/**'
    - '!node_modules/**'
    - '!package.json'
    - '!yarn.lock'
    - '!mocks/**'
    - '!downloads/**'
    - '!venv/**'
    - '!.venv/**'
    - '!env/**'
    - '!.env/**'
    - '!data/**'
    - '!swagger/**'
    - '!docker-compose.yml'
    - '!docker-compose.override.sample.yml'
    - '!docker-compose.override.yml'
    - '!docker-compose.ci.yml'
    - '!buildspec.yml'
    - '!slimpatterns.yml'
    - '!Makefile'
    - '!README.md'
    - '!requirements-dev.txt'
    - '!requirements-test.txt'
    - '!haproxy.cfg'
    - '!loaddata.sh'
    - '!syncdkr.sh'
