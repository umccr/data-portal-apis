service: data-portal-api

plugins:
  - serverless-wsgi
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-aws-documentation
  - serverless-associate-waf
  - serverless-plugin-scripts

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:STAGE}
  region: ap-southeast-2
  deploymentBucket: ${env:SERVERLESS_DEPLOYMENT_BUCKET}
  role: ${env:LAMBDA_IAM_ROLE_ARN}
  vpc:
    securityGroupIds:
      "Fn::Split":
        - ","
        - ${env:LAMBDA_SECURITY_GROUP_IDS}
    subnetIds:
      "Fn::Split":
        - ","
        - ${env:LAMBDA_SUBNET_IDS}
  environment:
    SSM_KEY_NAME_LIMS_SPREADSHEET_ID: ${env:SSM_KEY_NAME_LIMS_SPREADSHEET_ID}
    SSM_KEY_NAME_LIMS_SERVICE_ACCOUNT_JSON: ${env:SSM_KEY_NAME_LIMS_SERVICE_ACCOUNT_JSON}
    SSM_KEY_NAME_DJANGO_SECRET_KEY: ${env:SSM_KEY_NAME_DJANGO_SECRET_KEY}
    SSM_KEY_NAME_FULL_DB_URL: ${env:SSM_KEY_NAME_FULL_DB_URL}
    SSM_KEY_NAME_IAP_AUTH_TOKEN: ${env:SSM_KEY_NAME_IAP_AUTH_TOKEN}
    SLACK_CHANNEL: ${env:SLACK_CHANNEL}
    DJANGO_SETTINGS_MODULE: data_portal.settings.aws

functions:
  api:
    handler: wsgi_handler.handler
    events:
      - http:
          path: lims
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: lims/{id}
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: s3
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: s3/{s3Id}
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: s3/{s3Id}/presign
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: s3/{s3Id}/status
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: s3/{s3Id}/restore
          method: post
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: gds
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: gds/{gdsId}
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: buckets
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: subjects
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: subjects/{subjectId}
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: subjects/{subjectId}/s3
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: subjects/{subjectId}/s3/{s3Id}
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: subjects/{subjectId}/gds
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: subjects/{subjectId}/gds/{gdsId}
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: runs
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: runs/{runId}
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: runs/{runId}/s3
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: runs/{runId}/s3/{s3Id}
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: runs/{runId}/gds
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: runs/{runId}/gds/{gdsId}
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: runs/{runId}/lims
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: runs/{runId}/lims/{limsId}
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: presign
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: files
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: file-signed-url
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
      - http:
          path: storage-stats
          method: get
          integration: lambda-proxy
          authorizer: aws_iam
          cors: true
  migrate:
    handler: migrate.handler
    timeout: 20
  lims_scheduled_update_processor:
    handler: data_processors.lims.lambdas.scheduled_update_handler
    events:
      - schedule:
          rate: cron(0 12 * * ? *)
          enabled: ${self:custom.enabled.${opt:STAGE}, self.enabled.other}
    timeout: 28
  sqs_s3_event_processor:
    handler: data_processors.s3.lambdas.handler
    events:
      - sqs:
          arn: ${env:S3_EVENT_SQS_ARN}
  sqs_iap_event_processor:
    handler: data_processors.pipeline.lambdas.sqs_iap_event.handler
    events:
      - sqs:
          arn: ${env:IAP_ENS_EVENT_SQS_ARN}
  bcl_convert:
    handler: data_processors.pipeline.lambdas.bcl_convert.handler
    timeout: 28
  germline:
    handler: data_processors.pipeline.lambdas.germline.handler
    timeout: 28
  fastq:
    handler: data_processors.pipeline.lambdas.fastq.handler
    timeout: 28
  demux:
    handler: data_processors.pipeline.lambdas.demux.handler
    timeout: 28
  orchestrator:
    handler: data_processors.pipeline.lambdas.orchestrator.handler
    timeout: 28
  workflow_update:
    handler: data_processors.pipeline.lambdas.workflow_update.handler
    timeout: 28
  wes_launch:
    handler: data_processors.pipeline.lambdas.wes_handler.launch
    timeout: 28
  wes_get_workflow_run:
    handler: data_processors.pipeline.lambdas.wes_handler.get_workflow_run
    timeout: 28

custom:
  enabled:
    dev: false
    prod: true
    other: false
  wsgi:
    app: data_portal.wsgi.application
    packRequirements: false
  scripts:
    hooks:
      'deploy:finalize': SLS_DEBUG=true sls invoke -f migrate --STAGE ${opt:STAGE} --noinput
  pythonRequirements:
     zip: true
     slim: true
     slimPatternsAppendDefaults: false
     slimPatterns:
       - '**/*.py[c|o]'
       - '**/__pycache__*'
  customDomain:
    domainName: ${env:API_DOMAIN_NAME}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateArn: ${env:CERTIFICATE_ARN}
  associateWaf:
    name: ${env:WAF_NAME}
package:
  exclude:
    - node_modules/**
    - mocks/**
    - downloads/**
    - venv/**
    - .venv/**
    - env/**
    - data/**
    - docker-compose.yml
    - docker-compose.override.sample.yml
    - docker-compose.override.yml
    - main.tf
    - .terraform/**
    - iap-mock.yml
    - haproxy.cfg
    - start.sh
    - loaddata.sh
